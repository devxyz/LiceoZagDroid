package it.gov.scuolesuperioridizagarolo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CACHE_FILE_DB".
*/
public class CacheFileDBDao extends AbstractDao<CacheFileDB, Long> {

    public static final String TABLENAME = "CACHE_FILE_DB";

    /**
     * Properties of entity CacheFileDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Filename = new Property(2, String.class, "filename", false, "FILENAME");
        public final static Property Insertion_date = new Property(3, java.util.Date.class, "insertion_date", false, "INSERTION_DATE");
        public final static Property Load_complete = new Property(4, boolean.class, "load_complete", false, "LOAD_COMPLETE");
    }


    public CacheFileDBDao(DaoConfig config) {
        super(config);
    }
    
    public CacheFileDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CACHE_FILE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT NOT NULL UNIQUE ," + // 1: url
                "\"FILENAME\" TEXT NOT NULL ," + // 2: filename
                "\"INSERTION_DATE\" INTEGER NOT NULL ," + // 3: insertion_date
                "\"LOAD_COMPLETE\" INTEGER NOT NULL );"); // 4: load_complete
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CACHE_FILE_DB_URL ON \"CACHE_FILE_DB\"" +
                " (\"URL\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CACHE_FILE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CacheFileDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindString(3, entity.getFilename());
        stmt.bindLong(4, entity.getInsertion_date().getTime());
        stmt.bindLong(5, entity.getLoad_complete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CacheFileDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindString(3, entity.getFilename());
        stmt.bindLong(4, entity.getInsertion_date().getTime());
        stmt.bindLong(5, entity.getLoad_complete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CacheFileDB readEntity(Cursor cursor, int offset) {
        CacheFileDB entity = new CacheFileDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // url
            cursor.getString(offset + 2), // filename
            new java.util.Date(cursor.getLong(offset + 3)), // insertion_date
            cursor.getShort(offset + 4) != 0 // load_complete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CacheFileDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setFilename(cursor.getString(offset + 2));
        entity.setInsertion_date(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setLoad_complete(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CacheFileDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CacheFileDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CacheFileDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
