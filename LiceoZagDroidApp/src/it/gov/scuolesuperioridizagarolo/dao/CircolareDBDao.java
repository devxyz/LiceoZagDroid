package it.gov.scuolesuperioridizagarolo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CIRCOLARE_DB".
*/
public class CircolareDBDao extends AbstractDao<CircolareDB, Long> {

    public static final String TABLENAME = "CIRCOLARE_DB";

    /**
     * Properties of entity CircolareDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DataInserimento = new Property(1, java.util.Date.class, "dataInserimento", false, "DATA_INSERIMENTO");
        public final static Property Data = new Property(2, java.util.Date.class, "data", false, "DATA");
        public final static Property Numero = new Property(3, int.class, "numero", false, "NUMERO");
        public final static Property Titolo = new Property(4, String.class, "titolo", false, "TITOLO");
        public final static Property Testo = new Property(5, String.class, "testo", false, "TESTO");
        public final static Property Token = new Property(6, long.class, "token", false, "TOKEN");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property FlagContenutoLetto = new Property(8, boolean.class, "flagContenutoLetto", false, "FLAG_CONTENUTO_LETTO");
        public final static Property Key = new Property(9, String.class, "key", false, "KEY");
    }


    public CircolareDBDao(DaoConfig config) {
        super(config);
    }
    
    public CircolareDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CIRCOLARE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATA_INSERIMENTO\" INTEGER NOT NULL ," + // 1: dataInserimento
                "\"DATA\" INTEGER NOT NULL ," + // 2: data
                "\"NUMERO\" INTEGER NOT NULL ," + // 3: numero
                "\"TITOLO\" TEXT NOT NULL ," + // 4: titolo
                "\"TESTO\" TEXT," + // 5: testo
                "\"TOKEN\" INTEGER NOT NULL ," + // 6: token
                "\"URL\" TEXT NOT NULL UNIQUE ," + // 7: url
                "\"FLAG_CONTENUTO_LETTO\" INTEGER NOT NULL ," + // 8: flagContenutoLetto
                "\"KEY\" TEXT NOT NULL UNIQUE );"); // 9: key
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CIRCOLARE_DB_DATA_NUMERO ON \"CIRCOLARE_DB\"" +
                " (\"DATA\",\"NUMERO\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CIRCOLARE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CircolareDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDataInserimento().getTime());
        stmt.bindLong(3, entity.getData().getTime());
        stmt.bindLong(4, entity.getNumero());
        stmt.bindString(5, entity.getTitolo());
 
        String testo = entity.getTesto();
        if (testo != null) {
            stmt.bindString(6, testo);
        }
        stmt.bindLong(7, entity.getToken());
        stmt.bindString(8, entity.getUrl());
        stmt.bindLong(9, entity.getFlagContenutoLetto() ? 1L: 0L);
        stmt.bindString(10, entity.getKey());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CircolareDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDataInserimento().getTime());
        stmt.bindLong(3, entity.getData().getTime());
        stmt.bindLong(4, entity.getNumero());
        stmt.bindString(5, entity.getTitolo());
 
        String testo = entity.getTesto();
        if (testo != null) {
            stmt.bindString(6, testo);
        }
        stmt.bindLong(7, entity.getToken());
        stmt.bindString(8, entity.getUrl());
        stmt.bindLong(9, entity.getFlagContenutoLetto() ? 1L: 0L);
        stmt.bindString(10, entity.getKey());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CircolareDB readEntity(Cursor cursor, int offset) {
        CircolareDB entity = new CircolareDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // dataInserimento
            new java.util.Date(cursor.getLong(offset + 2)), // data
            cursor.getInt(offset + 3), // numero
            cursor.getString(offset + 4), // titolo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // testo
            cursor.getLong(offset + 6), // token
            cursor.getString(offset + 7), // url
            cursor.getShort(offset + 8) != 0, // flagContenutoLetto
            cursor.getString(offset + 9) // key
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CircolareDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataInserimento(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setData(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setNumero(cursor.getInt(offset + 3));
        entity.setTitolo(cursor.getString(offset + 4));
        entity.setTesto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setToken(cursor.getLong(offset + 6));
        entity.setUrl(cursor.getString(offset + 7));
        entity.setFlagContenutoLetto(cursor.getShort(offset + 8) != 0);
        entity.setKey(cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CircolareDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CircolareDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CircolareDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
