package it.gov.scuolesuperioridizagarolo.dao;

import org.greenrobot.greendao.annotation.*;

import it.gov.scuolesuperioridizagarolo.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "NEWS_CONTIENE_TERMINE_DB".
 */
@Entity(active = true, indexes = {
    @Index(value = "_id_news, _id_termine", unique = true)
})
public class NewsContieneTermineDB {
    private long _id_news;
    private long _id_termine;

    @Id(autoincrement = true)
    private Long id;
    private long occorrenze;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient NewsContieneTermineDBDao myDao;

    @ToOne(joinProperty = "_id_news")
    private NewsDB newsDB;

    @Generated
    private transient Long newsDB__resolvedKey;

    @ToOne(joinProperty = "_id_termine")
    private TermineDB termineDB;

    @Generated
    private transient Long termineDB__resolvedKey;

    @Generated
    public NewsContieneTermineDB() {
    }

    public NewsContieneTermineDB(Long id) {
        this.id = id;
    }

    @Generated
    public NewsContieneTermineDB(long _id_news, long _id_termine, Long id, long occorrenze) {
        this._id_news = _id_news;
        this._id_termine = _id_termine;
        this.id = id;
        this.occorrenze = occorrenze;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNewsContieneTermineDBDao() : null;
    }

    public long get_id_news() {
        return _id_news;
    }

    public void set_id_news(long _id_news) {
        this._id_news = _id_news;
    }

    public long get_id_termine() {
        return _id_termine;
    }

    public void set_id_termine(long _id_termine) {
        this._id_termine = _id_termine;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getOccorrenze() {
        return occorrenze;
    }

    public void setOccorrenze(long occorrenze) {
        this.occorrenze = occorrenze;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public NewsDB getNewsDB() {
        long __key = this._id_news;
        if (newsDB__resolvedKey == null || !newsDB__resolvedKey.equals(__key)) {
            __throwIfDetached();
            NewsDBDao targetDao = daoSession.getNewsDBDao();
            NewsDB newsDBNew = targetDao.load(__key);
            synchronized (this) {
                newsDB = newsDBNew;
            	newsDB__resolvedKey = __key;
            }
        }
        return newsDB;
    }

    @Generated
    public void setNewsDB(NewsDB newsDB) {
        if (newsDB == null) {
            throw new DaoException("To-one property '_id_news' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.newsDB = newsDB;
            _id_news = newsDB.getId();
            newsDB__resolvedKey = _id_news;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public TermineDB getTermineDB() {
        long __key = this._id_termine;
        if (termineDB__resolvedKey == null || !termineDB__resolvedKey.equals(__key)) {
            __throwIfDetached();
            TermineDBDao targetDao = daoSession.getTermineDBDao();
            TermineDB termineDBNew = targetDao.load(__key);
            synchronized (this) {
                termineDB = termineDBNew;
            	termineDB__resolvedKey = __key;
            }
        }
        return termineDB;
    }

    @Generated
    public void setTermineDB(TermineDB termineDB) {
        if (termineDB == null) {
            throw new DaoException("To-one property '_id_termine' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.termineDB = termineDB;
            _id_termine = termineDB.getId();
            termineDB__resolvedKey = _id_termine;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
